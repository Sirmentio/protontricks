#!/usr/bin/env python3
# _____         _           _       _     _
# |  _  |___ ___| |_ ___ ___| |_ ___|_|___| |_ ___
# |   __|  _| . |  _| . |   |  _|  _| |  _| '_|_ -|
# |__|  |_| |___|_| |___|_|_|_| |_| |_|___|_,_|___|
# A simple wrapper that makes it slightly painless to use winetricks with
# Proton prefixes
# Script by Sirmentio, Copyright 2018, Licensed under the GPLv3!

import binascii
import glob
import os
import re
import string
import struct
import subprocess
import sys

COMMON_STEAM_DIRS = [
    os.path.join(os.environ.get("HOME"), ".steam", "steam"),
    os.path.join(os.environ.get("HOME"), ".local", "share", "Steam")
]


class SteamApp(object):
    """
    SteamApp represents an installed Steam app
    """
    __slots__ = ("appid", "name", "prefix_path", "install_path")

    def __init__(self, appid, name, prefix_path, install_path):
        """
        :appid: App's appid
        :name: The app's human-readable name
        :prefix_path: Absolute path to where the app's Wine prefix *might*
                      exist.
        :app_path: Absolute path to app's installation directory
        """
        self.appid = int(appid)
        self.name = name
        self.prefix_path = prefix_path
        self.install_path = install_path

    @property
    def prefix_path_exists(self):
        """
        Returns True if the app has a Wine prefix directory
        """
        return os.path.exists(self.prefix_path)

    def name_contains(self, s):
        """
        Returns True if the name contains the given substring.
        Both strings are normalized for easier searching before comparison.
        """
        def normalize_str(s):
            """
            Normalize the string to make it easier for human to
            perform a search by removing all symbols
            except ASCII digits and letters and turning it into lowercase
            """
            printable = set(string.printable) - set(string.punctuation)
            s = "".join([c for c in s if c in printable])
            s = s.lower()
            s = s.replace(" ", "")
            return s

        return normalize_str(s) in normalize_str(self.name)

    @property
    def is_proton(self):
        """
        Return True if this app is a Proton installation
        """
        # If the installation directory contains a file named "proton",
        # it's a Proton installation
        return os.path.exists(os.path.join(self.install_path, "proton"))

    @classmethod
    def from_appmanifest(cls, path):
        """
        Parse appmanifest_X.acf file containing Steam app installation metadata
        and return a SteamApp object
        """
        with open(path, "r") as f:
            content = f.read()

        # App manifest may be completely empty or a pre-allocated zero'd block.
        # In that case, skip it
        if content.strip() == "" or content[0] == '\0':
            return None

        appid = int(re.search(r'(\t"appid"\s+")([0-9]+)', content).group(2))
        name = re.search(r'(\t"name"\s+")([\w\W]+?)"\n', content).group(2)
        prefix_path = os.path.join(
            os.path.split(path)[0], "compatdata", str(appid), "pfx")

        install_name = re.search(
            r'(\t"name"\s+")([\w\W]+?)"\n', content).group(2)
        install_path = os.path.join(
            os.path.split(path)[0], "common", install_name)

        return cls(
            appid=appid, name=name, prefix_path=prefix_path,
            install_path=install_path)


def find_steam_dir():
    """
    Try to discover default Steam dir using common locations and return the
    first one that matches
    """
    for steam_dir in COMMON_STEAM_DIRS:
        # If it has a 'steamapps' subdirectory, we can be certain it's the
        # correct directory
        if os.path.isdir(os.path.join(steam_dir, "steamapps")):
            return steam_dir
            
        # Some users may have imported their imported their install from
        # Windows, this checks for the "capitalized" version of the
        # Steam library directory.
        elif os.path.isdir(os.path.join(steam_dir, "SteamApps")):
            return steam_dir

    return None


def find_current_proton_app(steam_dir, steam_apps):
    """
    Get the current Proton installation used by Steam
    and return a SteamApp object
    """
    config_vdf_path = os.path.join(steam_dir, "config", "config.vdf")

    with open(config_vdf_path, "r") as f:
        content = f.read()

    # Search config.vdf for a line containing the current Proton installation:
    # "name"     "proton_37_beta"
    # There's also a package on PyPi to parse the actual VDF, but this should
    # work good enough and keep the script self-contained
    pattern = re.compile(r'(\t\t\t\t\t\t"name"\s+")(proton\w+)')

    match = pattern.search(content)

    if not match:
        return None

    match = match.group(2)

    # Find the corresponding App ID from <steam_dir>/appcache/appinfo.vdf
    appinfo_path = os.path.join(steam_dir, "appcache", "appinfo.vdf")

    with open(appinfo_path, "rb") as f:
        appinfo = str(binascii.hexlify(f.read()), "utf-8")

    # In ASCII, the substring we're looking for looks like this
    # proton_316_beta..appid.
    appid_regex = "({name_ascii}0002617070696400)([a-z0-9]{{8}})".format(
        name_ascii=str(binascii.hexlify(bytes(match, "utf-8")), "utf-8")
    )
    # The second group contains the App ID as a 32-bit integer in little-endian
    proton_appid = re.search(appid_regex, appinfo).group(2)
    proton_appid = struct.unpack("<I", binascii.unhexlify(proton_appid))[0]

    # We've now got the appid. Return the corresponding SteamApp
    try:
        return next(app for app in steam_apps if app.appid == proton_appid)
    except StopIteration:
        return None


def get_steam_lib_dirs(steam_dir):
    """
    Return a list of any Steam directories including any user-added
    Steam library folders
    """
    def parse_library_folders(data):
        """
        Parse the Steam library folders in the VDF file using the given data
        """
        # VDF key & value pairs have the following syntax:
        # \t"<KEY>"\t\t"<VALUE>"
        pattern = re.compile(r'\t"([^"]*)"\t\t"([^"]*)"')

        lines = data.split("\n")

        # Skip the header and the last line
        lines = lines[2:]
        lines = lines[:-2]

        library_folders = []

        for line in lines:  # Skip the header and the last line
            match = pattern.search(line)
            key, value = match.group(1), match.group(2)

            # Keys corresponding to library folders are integers. Other keys
            # we can skip.
            try:
                key = int(key)
            except ValueError:
                continue

            library_folders.append(value)

        print(
            "[INFO] Found {} Steam library folders".format(
                len(library_folders)
            )
        )
        return library_folders

    # Try finding Steam library folders using libraryfolders.vdf in Steam root
    if os.path.isdir(os.path.join(steam_dir, "steamapps")):
        folders_vdf_path = os.path.join(
            steam_dir, "steamapps", "libraryfolders.vdf")
    elif os.path.isdir(os.path.join(steam_dir, "SteamApps")):
         folders_vdf_path = os.path.join(
            steam_dir, "SteamApps", "libraryfolders.vdf")
    try:
        with open(folders_vdf_path, "r") as f:
            library_folders = parse_library_folders(f.read())
    except OSError:
        # libraryfolders.vdf doesn't exist; maybe no Steam library folders
        # are set?
        library_folders = []

    return [steam_dir] + library_folders


def get_steam_apps(steam_lib_dirs):
    """
    Find all the installed Steam apps and return them as a list of SteamApp
    objects
    """
    steam_apps = []

    for path in steam_lib_dirs:
        if os.path.isdir(os.path.join(path, "steamapps")):
            appmanifest_paths = glob.glob(
                os.path.join(path, "steamapps", "appmanifest_*.acf")
            )
        elif os.path.isdir(os.path.join(path, "SteamApps")):
            appmanifest_paths = glob.glob(
                os.path.join(path, "SteamApps", "appmanifest_*.acf")
            )

        for path in appmanifest_paths:
            steam_app = SteamApp.from_appmanifest(path)
            if steam_app:
                steam_apps.append(steam_app)

    return steam_apps


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print("Usage:\n"
              "\n"
              "Run winetricks for game with APPID\n"
              "$ protontricks APPID COMMAND\n"
              "\n"
              "Search installed games to find the APPID\n"
              "$ protontricks -s GAME_NAME")
        sys.exit(0)

    # Prerequisite check
    prereq_fail = False

    # Check if $STEAM_DIR is a valid environment variable, otherwise use the
    # default.
    if os.environ.get('STEAM_DIR') is None:
        steam_dir = find_steam_dir()
        if steam_dir:
            print(
                "[INFO] Found Steam directory at {}. You can also define "
                "Steam directory manually using $STEAM_DIR".format(steam_dir)
            )
        else:
            print(
                "[ERROR!] Steam directory couldn't be found automatically and "
                "environment variable $STEAM_DIR isn't set!"
            )
            sys.exit(-1)
    else:
        steam_dir = os.environ.get('STEAM_DIR')
        print("[INFO] Steam directory set to {}".format(steam_dir))

    if os.environ.get('WINETRICKS') is None:
        print("[INFO] WINETRICKS environment variable is not available. "
              "Falling back to /usr/bin/winetricks")
        os.environ["WINETRICKS"] = "/usr/bin/winetricks"
        if not os.path.exists("/usr/bin/winetricks"):
            print("[ERROR!] Winetricks isn't installed, please install "
                  "winetricks in order to use this script!")
            prereq_fail = True
    else:
        print(
            "[INFO] Winetricks path is set to {}".format(
                os.environ.get('WINETRICKS')
            )
        )
        if not os.path.exists(os.environ.get('WINETRICKS')):
            print("[ERROR!] The WINETRICKS path is invalid, please make sure "
                  "Winetricks is installed in that path!")
            prereq_fail = True

    steam_lib_dirs = get_steam_lib_dirs(steam_dir)
    steam_apps = get_steam_apps(steam_lib_dirs)

    if not os.environ.get("PROTON_VERSION"):
        # If $PROTON_VERSION isn't set, find the currently used Proton
        # installation automatically
        proton_app = find_current_proton_app(
            steam_dir=steam_dir, steam_apps=steam_apps)
        if proton_app:
            print(
                "[INFO] Found active Proton installation: {}".format(
                    proton_app.name
                )
            )
        else:
            print("[ERROR!] Current Proton installation couldn't be found "
                  "automatically and $PROTON_VERSION wasn't set")
            sys.exit(-1)
    else:
        proton_version = os.environ.get("PROTON_VERSION")
        try:
            proton_app = next(
                app for app in steam_apps
                if app.name == proton_version)
        except StopIteration:
            proton_app = None

    if proton_app:
        print("[INFO] Using Proton installation at {}".format(
            proton_app.install_path)
        )
    else:
        print("[ERROR!] Proton installation could not be found!")
        prereq_fail = True

    # If one or more checks fail, don't do anything in the script.
    if prereq_fail is True:
        print("[FATAL] Sorry, one or more errors prevents this script from "
              "being used, check the console for details...")
        sys.exit(-1)

    if os.environ.get('WINE') is None:
        print("[INFO] WINE environment variable is not available. "
              "Setting WINE environment variable to Proton bundled version")
        os.environ["WINE"] = os.path.join(
            proton_app.install_path, "dist", "bin", "wine")

    if os.environ.get('WINESERVER') is None:
        print("[INFO] WINESERVER environment variable is not available. "
              "Setting WINESERVER environment variable to Proton bundled "
              "version")
        os.environ["WINESERVER"] = os.path.join(
            proton_app.install_path, "dist", "bin", "wineserver")

    if sys.argv[1].lower() == "gui":
        combo_values = "|".join(['{}: {}'.format(app.name, app.appid) for app in steam_apps])
        try:
            choice = subprocess.check_output(['zenity', '--forms', '--text=Steam Game Library',
                                              '--title=Choose Game', '--add-combo', 'Pick a library game',
                                              '--combo-values', combo_values])
            choice_id = str(choice).rsplit(':')[-1]
            choice_id = ''.join(x for x in choice_id if x.isdigit())
            sys.argv = [sys.argv[0], choice_id, '--gui']

        except subprocess.CalledProcessError:
            print("Zenity returned an error or cancel was clicked")
            sys.exit(0)
        except OSError:
            print("Zenity was not found")

    if sys.argv[1] == "-s":
        # Search for games
        search_query = " ".join(sys.argv[2:])
        matching_apps = [
            app for app in steam_apps
            if app.name_contains(search_query)
        ]

        if matching_apps:
            matching_games = "\n".join([
                "{} ({})".format(app.name, app.appid)
                for app in matching_apps
            ])
            print(
                "Found the following games:"
                "\n{}\n".format(matching_games)
            )
            print(
                "To run protontricks for the chosen game, run:\n"
                "$ protontricks APPID COMMAND"
            )
        else:
            print("Found no games.")
        sys.exit(0)
    else:
        # Find game by appid
        game_appid = int(sys.argv[1])
        try:
            game_app = next(
                app for app in steam_apps
                if app.appid == game_appid and app.prefix_path_exists)
        except StopIteration:
            game_app = None

    if game_app:
        os.environ["WINEPREFIX"] = game_app.prefix_path
    else:
        print("[FATAL] You don't seem to have a game with that ID. Is it "
              "installed, Proton compatible and have you launched it at least "
              "once? You can usually get the App ID via the store page URL.")
        sys.exit(-1)

    # Unset WINEARCH, which might be set for another Wine installation
    os.environ.pop("WINEARCH", "")

    print(
        "[INFO] Found the prefix directory at {}".format(
            os.environ.get('WINEPREFIX')
        )
    )
    subprocess.call(
    	[
        	os.path.join(steam_dir, 'ubuntu12_32', 'steam-runtime', 'run.sh'),
        	os.environ.get('WINETRICKS')
        ] + sys.argv[2:]
    )
